// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @default(cuid()) @id
  name          String       @db.VarChar(50)
  username      String       @db.VarChar(50)
  password      String       @db.VarChar(100)
  email         String?      @db.VarChar(20)
  sort          Int?         @default(0)
  type          String       @db.VarChar(50)
  mobile        String?      @db.VarChar(20)
  remark        String?      @db.VarChar(200)
  disabled      Boolean?     @default(false)
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  user_role     UserRole[]      
  user_dept     UserDept[] 
  @@map(name: "users")
}

model Role {
  id            String       @default(cuid()) @id
  name          String       @db.VarChar(50)
  code          String       @db.VarChar(50)
  status        Boolean?     @default(false)
  sort          Int?         @default(0)
  remark        String?      @db.VarChar(200)
  createdById   String?        
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  user_role     UserRole[]   
  menu_role     MenuRole[]
  @@map(name: "roles")
}

model UserRole {
  user_id     String
  role_id     String
  users  User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles  Role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, role_id], map: "user_role")
  @@map(name: "user_role")
}


model Menu {
  id            String       @default(cuid()) @id
  pid           String       @db.VarChar(50)
  type          Int          @default(1) // 1目录 2菜单 3按钮
  name          String       @db.VarChar(50)
  icon          String?      @db.VarChar(50)
  route_path    String?      
  sort          Int?         @default(0)
  perms         String?      @db.VarChar(200)
  addit_perms   String?      @db.VarChar(200)
  remark        String?      @db.VarChar(200)
  createdById   String?        
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  menu_role     MenuRole[]   
  
  @@map(name: "menus")
}

model MenuRole {
  menu_id     String
  role_id     String
  menus  Menu @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles  Role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([menu_id, role_id], map: "menu_role")
  @@map(name: "menu_role")
}


model Dept {
  id            String       @default(cuid()) @id
  pid           String       @db.VarChar(50)
  name          String       @db.VarChar(50)
  status        Boolean?     @default(false)
  sort          Int          @default(0)
  remark        String?      @db.VarChar(200)
  type          String       @db.VarChar(50)
  createdById   String?        
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  dept_user     UserDept[]   
  
  @@map(name: "depts")
}


model UserDept {
  dept_id     String
  user_id     String
  depts  Dept @relation(fields: [dept_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users  User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dept_id, user_id], map: "user_dept")
  @@map(name: "user_dept")
}


model Dict {
  id            String       @default(cuid()) @id
  name          String       @db.VarChar(50)
  code          String       @db.VarChar(50)
  sort          Int          @default(0)
  readonly      Boolean?     @default(false)
  disabled      Boolean?     @default(false)
  login_return  Boolean?     @default(true)
  remark        String?      @db.VarChar(200)
  createdById   String?        
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  dict_datas    DictData[]
  
  @@map(name: "dicts")
}


model DictData {
  id            String       @default(cuid()) @id
  label         String       @db.VarChar(50)
  dict          Dict         @relation(fields: [dict_code], references: [id])
  dict_code     String
  value         String       @db.VarChar(50)
  sort          Int          @default(0)
  readonly      Boolean?     @default(false)
  disabled      Boolean?     @default(false)
  remark        String?      @db.VarChar(200)
  createdById   String?        
  createdTime   DateTime     @default(now()) @map(name: "create_time")
  updatedTime   DateTime     @updatedAt @map(name: "update_time")
  
  @@map(name: "dict_datas")
}